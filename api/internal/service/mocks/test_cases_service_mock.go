// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/test_cases_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/test_cases_service.go -destination=internal/service/mocks/test_cases_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTestCaseServiceInterface is a mock of TestCaseServiceInterface interface.
type MockTestCaseServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTestCaseServiceInterfaceMockRecorder is the mock recorder for MockTestCaseServiceInterface.
type MockTestCaseServiceInterfaceMockRecorder struct {
	mock *MockTestCaseServiceInterface
}

// NewMockTestCaseServiceInterface creates a new mock instance.
func NewMockTestCaseServiceInterface(ctrl *gomock.Controller) *MockTestCaseServiceInterface {
	mock := &MockTestCaseServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTestCaseServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseServiceInterface) EXPECT() *MockTestCaseServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckTestSuiteExists mocks base method.
func (m *MockTestCaseServiceInterface) CheckTestSuiteExists(suiteID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTestSuiteExists", suiteID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTestSuiteExists indicates an expected call of CheckTestSuiteExists.
func (mr *MockTestCaseServiceInterfaceMockRecorder) CheckTestSuiteExists(suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTestSuiteExists", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).CheckTestSuiteExists), suiteID)
}

// CreateTestCase mocks base method.
func (m *MockTestCaseServiceInterface) CreateTestCase(suiteID int64, name, classname string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCase", suiteID, name, classname)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestCase indicates an expected call of CreateTestCase.
func (mr *MockTestCaseServiceInterfaceMockRecorder) CreateTestCase(suiteID, name, classname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCase", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).CreateTestCase), suiteID, name, classname)
}

// FindOrCreateTestCaseWithTx mocks base method.
func (m *MockTestCaseServiceInterface) FindOrCreateTestCaseWithTx(tx *sql.Tx, suiteID int64, name, classname string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateTestCaseWithTx", tx, suiteID, name, classname)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateTestCaseWithTx indicates an expected call of FindOrCreateTestCaseWithTx.
func (mr *MockTestCaseServiceInterfaceMockRecorder) FindOrCreateTestCaseWithTx(tx, suiteID, name, classname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateTestCaseWithTx", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).FindOrCreateTestCaseWithTx), tx, suiteID, name, classname)
}

// GetMostFailedTests mocks base method.
func (m *MockTestCaseServiceInterface) GetMostFailedTests(projectID int64, suiteID *int64, limit int) ([]models.MostFailedTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostFailedTests", projectID, suiteID, limit)
	ret0, _ := ret[0].([]models.MostFailedTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostFailedTests indicates an expected call of GetMostFailedTests.
func (mr *MockTestCaseServiceInterfaceMockRecorder) GetMostFailedTests(projectID, suiteID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostFailedTests", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).GetMostFailedTests), projectID, suiteID, limit)
}

// GetTestCaseByID mocks base method.
func (m *MockTestCaseServiceInterface) GetTestCaseByID(caseID int64) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCaseByID", caseID)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCaseByID indicates an expected call of GetTestCaseByID.
func (mr *MockTestCaseServiceInterfaceMockRecorder) GetTestCaseByID(caseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCaseByID", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).GetTestCaseByID), caseID)
}

// GetTestCasesBySuiteID mocks base method.
func (m *MockTestCaseServiceInterface) GetTestCasesBySuiteID(suiteID int64) ([]models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCasesBySuiteID", suiteID)
	ret0, _ := ret[0].([]models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCasesBySuiteID indicates an expected call of GetTestCasesBySuiteID.
func (mr *MockTestCaseServiceInterfaceMockRecorder) GetTestCasesBySuiteID(suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCasesBySuiteID", reflect.TypeOf((*MockTestCaseServiceInterface)(nil).GetTestCasesBySuiteID), suiteID)
}
