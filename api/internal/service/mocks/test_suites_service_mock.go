// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/test_suites_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/test_suites_service.go -destination=internal/service/mocks/test_suites_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTestSuiteServiceInterface is a mock of TestSuiteServiceInterface interface.
type MockTestSuiteServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTestSuiteServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTestSuiteServiceInterfaceMockRecorder is the mock recorder for MockTestSuiteServiceInterface.
type MockTestSuiteServiceInterfaceMockRecorder struct {
	mock *MockTestSuiteServiceInterface
}

// NewMockTestSuiteServiceInterface creates a new mock instance.
func NewMockTestSuiteServiceInterface(ctrl *gomock.Controller) *MockTestSuiteServiceInterface {
	mock := &MockTestSuiteServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTestSuiteServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSuiteServiceInterface) EXPECT() *MockTestSuiteServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckProjectExists mocks base method.
func (m *MockTestSuiteServiceInterface) CheckProjectExists(projectID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProjectExists", projectID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProjectExists indicates an expected call of CheckProjectExists.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) CheckProjectExists(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProjectExists", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).CheckProjectExists), projectID)
}

// CheckTestSuiteExists mocks base method.
func (m *MockTestSuiteServiceInterface) CheckTestSuiteExists(suiteID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTestSuiteExists", suiteID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTestSuiteExists indicates an expected call of CheckTestSuiteExists.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) CheckTestSuiteExists(suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTestSuiteExists", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).CheckTestSuiteExists), suiteID)
}

// CreateTestSuite mocks base method.
func (m *MockTestSuiteServiceInterface) CreateTestSuite(projectID int64, name string, parentID *int64, time float64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestSuite", projectID, name, parentID, time)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestSuite indicates an expected call of CreateTestSuite.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) CreateTestSuite(projectID, name, parentID, time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestSuite", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).CreateTestSuite), projectID, name, parentID, time)
}

// GetProjectTestSuiteByID mocks base method.
func (m *MockTestSuiteServiceInterface) GetProjectTestSuiteByID(projectID, suiteID int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectTestSuiteByID", projectID, suiteID)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectTestSuiteByID indicates an expected call of GetProjectTestSuiteByID.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) GetProjectTestSuiteByID(projectID, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTestSuiteByID", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).GetProjectTestSuiteByID), projectID, suiteID)
}

// GetProjectTestSuiteByIDWithTx mocks base method.
func (m *MockTestSuiteServiceInterface) GetProjectTestSuiteByIDWithTx(tx *sql.Tx, projectID, suiteID int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectTestSuiteByIDWithTx", tx, projectID, suiteID)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectTestSuiteByIDWithTx indicates an expected call of GetProjectTestSuiteByIDWithTx.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) GetProjectTestSuiteByIDWithTx(tx, projectID, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTestSuiteByIDWithTx", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).GetProjectTestSuiteByIDWithTx), tx, projectID, suiteID)
}

// GetTestSuiteByID mocks base method.
func (m *MockTestSuiteServiceInterface) GetTestSuiteByID(suiteID int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuiteByID", suiteID)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuiteByID indicates an expected call of GetTestSuiteByID.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) GetTestSuiteByID(suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuiteByID", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).GetTestSuiteByID), suiteID)
}

// GetTestSuiteByName mocks base method.
func (m *MockTestSuiteServiceInterface) GetTestSuiteByName(projectID int64, name string) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuiteByName", projectID, name)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuiteByName indicates an expected call of GetTestSuiteByName.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) GetTestSuiteByName(projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuiteByName", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).GetTestSuiteByName), projectID, name)
}

// GetTestSuitesByProjectID mocks base method.
func (m *MockTestSuiteServiceInterface) GetTestSuitesByProjectID(projectID int64) ([]models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuitesByProjectID", projectID)
	ret0, _ := ret[0].([]models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuitesByProjectID indicates an expected call of GetTestSuitesByProjectID.
func (mr *MockTestSuiteServiceInterfaceMockRecorder) GetTestSuitesByProjectID(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuitesByProjectID", reflect.TypeOf((*MockTestSuiteServiceInterface)(nil).GetTestSuitesByProjectID), projectID)
}
