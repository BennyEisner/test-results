// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/build_executions_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/build_executions_service.go -destination=internal/service/mocks/build_executions_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBuildExecutionServiceInterface is a mock of BuildExecutionServiceInterface interface.
type MockBuildExecutionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBuildExecutionServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockBuildExecutionServiceInterfaceMockRecorder is the mock recorder for MockBuildExecutionServiceInterface.
type MockBuildExecutionServiceInterfaceMockRecorder struct {
	mock *MockBuildExecutionServiceInterface
}

// NewMockBuildExecutionServiceInterface creates a new mock instance.
func NewMockBuildExecutionServiceInterface(ctrl *gomock.Controller) *MockBuildExecutionServiceInterface {
	mock := &MockBuildExecutionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBuildExecutionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildExecutionServiceInterface) EXPECT() *MockBuildExecutionServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckBuildExists mocks base method.
func (m *MockBuildExecutionServiceInterface) CheckBuildExists(buildID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBuildExists", buildID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBuildExists indicates an expected call of CheckBuildExists.
func (mr *MockBuildExecutionServiceInterfaceMockRecorder) CheckBuildExists(buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBuildExists", reflect.TypeOf((*MockBuildExecutionServiceInterface)(nil).CheckBuildExists), buildID)
}

// CheckTestCaseExists mocks base method.
func (m *MockBuildExecutionServiceInterface) CheckTestCaseExists(testCaseID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTestCaseExists", testCaseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTestCaseExists indicates an expected call of CheckTestCaseExists.
func (mr *MockBuildExecutionServiceInterfaceMockRecorder) CheckTestCaseExists(testCaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTestCaseExists", reflect.TypeOf((*MockBuildExecutionServiceInterface)(nil).CheckTestCaseExists), testCaseID)
}

// CreateBuildExecutions mocks base method.
func (m *MockBuildExecutionServiceInterface) CreateBuildExecutions(buildID int64, inputs []models.BuildExecutionInput) ([]models.BuildTestCaseExecution, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildExecutions", buildID, inputs)
	ret0, _ := ret[0].([]models.BuildTestCaseExecution)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuildExecutions indicates an expected call of CreateBuildExecutions.
func (mr *MockBuildExecutionServiceInterfaceMockRecorder) CreateBuildExecutions(buildID, inputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildExecutions", reflect.TypeOf((*MockBuildExecutionServiceInterface)(nil).CreateBuildExecutions), buildID, inputs)
}

// CreateBuildExecutionsWithTx mocks base method.
func (m *MockBuildExecutionServiceInterface) CreateBuildExecutionsWithTx(tx *sql.Tx, buildID int64, inputs []models.BuildExecutionInput) ([]models.BuildTestCaseExecution, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildExecutionsWithTx", tx, buildID, inputs)
	ret0, _ := ret[0].([]models.BuildTestCaseExecution)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuildExecutionsWithTx indicates an expected call of CreateBuildExecutionsWithTx.
func (mr *MockBuildExecutionServiceInterfaceMockRecorder) CreateBuildExecutionsWithTx(tx, buildID, inputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildExecutionsWithTx", reflect.TypeOf((*MockBuildExecutionServiceInterface)(nil).CreateBuildExecutionsWithTx), tx, buildID, inputs)
}

// GetBuildExecutions mocks base method.
func (m *MockBuildExecutionServiceInterface) GetBuildExecutions(buildID int64) ([]models.BuildExecutionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildExecutions", buildID)
	ret0, _ := ret[0].([]models.BuildExecutionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildExecutions indicates an expected call of GetBuildExecutions.
func (mr *MockBuildExecutionServiceInterfaceMockRecorder) GetBuildExecutions(buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildExecutions", reflect.TypeOf((*MockBuildExecutionServiceInterface)(nil).GetBuildExecutions), buildID)
}
