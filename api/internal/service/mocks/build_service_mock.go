// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/build_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/build_service.go -destination=internal/service/mocks/build_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBuildServiceInterface is a mock of BuildServiceInterface interface.
type MockBuildServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBuildServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockBuildServiceInterfaceMockRecorder is the mock recorder for MockBuildServiceInterface.
type MockBuildServiceInterfaceMockRecorder struct {
	mock *MockBuildServiceInterface
}

// NewMockBuildServiceInterface creates a new mock instance.
func NewMockBuildServiceInterface(ctrl *gomock.Controller) *MockBuildServiceInterface {
	mock := &MockBuildServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBuildServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildServiceInterface) EXPECT() *MockBuildServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckTestSuiteExists mocks base method.
func (m *MockBuildServiceInterface) CheckTestSuiteExists(testSuiteID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTestSuiteExists", testSuiteID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTestSuiteExists indicates an expected call of CheckTestSuiteExists.
func (mr *MockBuildServiceInterfaceMockRecorder) CheckTestSuiteExists(testSuiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTestSuiteExists", reflect.TypeOf((*MockBuildServiceInterface)(nil).CheckTestSuiteExists), testSuiteID)
}

// CreateBuild mocks base method.
func (m *MockBuildServiceInterface) CreateBuild(build *models.Build) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", build)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildServiceInterfaceMockRecorder) CreateBuild(build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildServiceInterface)(nil).CreateBuild), build)
}

// CreateBuildWithTx mocks base method.
func (m *MockBuildServiceInterface) CreateBuildWithTx(tx *sql.Tx, build *models.Build) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildWithTx", tx, build)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuildWithTx indicates an expected call of CreateBuildWithTx.
func (mr *MockBuildServiceInterfaceMockRecorder) CreateBuildWithTx(tx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildWithTx", reflect.TypeOf((*MockBuildServiceInterface)(nil).CreateBuildWithTx), tx, build)
}

// DeleteBuild mocks base method.
func (m *MockBuildServiceInterface) DeleteBuild(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuild", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuild indicates an expected call of DeleteBuild.
func (mr *MockBuildServiceInterfaceMockRecorder) DeleteBuild(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuild", reflect.TypeOf((*MockBuildServiceInterface)(nil).DeleteBuild), id)
}

// GetAllBuilds mocks base method.
func (m *MockBuildServiceInterface) GetAllBuilds() ([]models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBuilds")
	ret0, _ := ret[0].([]models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBuilds indicates an expected call of GetAllBuilds.
func (mr *MockBuildServiceInterfaceMockRecorder) GetAllBuilds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBuilds", reflect.TypeOf((*MockBuildServiceInterface)(nil).GetAllBuilds))
}

// GetBuildByID mocks base method.
func (m *MockBuildServiceInterface) GetBuildByID(id int64) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildByID", id)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildByID indicates an expected call of GetBuildByID.
func (mr *MockBuildServiceInterfaceMockRecorder) GetBuildByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildByID", reflect.TypeOf((*MockBuildServiceInterface)(nil).GetBuildByID), id)
}

// GetBuildDurationTrends mocks base method.
func (m *MockBuildServiceInterface) GetBuildDurationTrends(projectID, suiteID int64) ([]models.BuildDurationTrend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildDurationTrends", projectID, suiteID)
	ret0, _ := ret[0].([]models.BuildDurationTrend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildDurationTrends indicates an expected call of GetBuildDurationTrends.
func (mr *MockBuildServiceInterfaceMockRecorder) GetBuildDurationTrends(projectID, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildDurationTrends", reflect.TypeOf((*MockBuildServiceInterface)(nil).GetBuildDurationTrends), projectID, suiteID)
}

// GetBuildsByTestSuiteID mocks base method.
func (m *MockBuildServiceInterface) GetBuildsByTestSuiteID(testSuiteID int64) ([]models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildsByTestSuiteID", testSuiteID)
	ret0, _ := ret[0].([]models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildsByTestSuiteID indicates an expected call of GetBuildsByTestSuiteID.
func (mr *MockBuildServiceInterfaceMockRecorder) GetBuildsByTestSuiteID(testSuiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildsByTestSuiteID", reflect.TypeOf((*MockBuildServiceInterface)(nil).GetBuildsByTestSuiteID), testSuiteID)
}

// GetRecentBuildsByProjectID mocks base method.
func (m *MockBuildServiceInterface) GetRecentBuildsByProjectID(projectID int64) ([]models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentBuildsByProjectID", projectID)
	ret0, _ := ret[0].([]models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentBuildsByProjectID indicates an expected call of GetRecentBuildsByProjectID.
func (mr *MockBuildServiceInterfaceMockRecorder) GetRecentBuildsByProjectID(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentBuildsByProjectID", reflect.TypeOf((*MockBuildServiceInterface)(nil).GetRecentBuildsByProjectID), projectID)
}

// UpdateBuild mocks base method.
func (m *MockBuildServiceInterface) UpdateBuild(id int64, buildNumber, ciProvider, ciURL *string, duration *float64) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuild", id, buildNumber, ciProvider, ciURL, duration)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildServiceInterfaceMockRecorder) UpdateBuild(id, buildNumber, ciProvider, ciURL, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildServiceInterface)(nil).UpdateBuild), id, buildNumber, ciProvider, ciURL, duration)
}
