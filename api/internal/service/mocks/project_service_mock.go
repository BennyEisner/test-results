// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/project_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/project_service.go -destination=internal/service/mocks/project_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectServiceInterface is a mock of ProjectServiceInterface interface.
type MockProjectServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectServiceInterfaceMockRecorder is the mock recorder for MockProjectServiceInterface.
type MockProjectServiceInterfaceMockRecorder struct {
	mock *MockProjectServiceInterface
}

// NewMockProjectServiceInterface creates a new mock instance.
func NewMockProjectServiceInterface(ctrl *gomock.Controller) *MockProjectServiceInterface {
	mock := &MockProjectServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceInterface) EXPECT() *MockProjectServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceInterface) CreateProject(name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceInterfaceMockRecorder) CreateProject(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).CreateProject), name)
}

// DeleteProject mocks base method.
func (m *MockProjectServiceInterface) DeleteProject(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceInterfaceMockRecorder) DeleteProject(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).DeleteProject), id)
}

// GetAllProjects mocks base method.
func (m *MockProjectServiceInterface) GetAllProjects() ([]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockProjectServiceInterfaceMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetAllProjects))
}

// GetDBTestProjectCount mocks base method.
func (m *MockProjectServiceInterface) GetDBTestProjectCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBTestProjectCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBTestProjectCount indicates an expected call of GetDBTestProjectCount.
func (mr *MockProjectServiceInterfaceMockRecorder) GetDBTestProjectCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBTestProjectCount", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetDBTestProjectCount))
}

// GetProjectByID mocks base method.
func (m *MockProjectServiceInterface) GetProjectByID(id int64) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectServiceInterfaceMockRecorder) GetProjectByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetProjectByID), id)
}

// GetProjectByName mocks base method.
func (m *MockProjectServiceInterface) GetProjectByName(name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName.
func (mr *MockProjectServiceInterfaceMockRecorder) GetProjectByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetProjectByName), name)
}

// UpdateProject mocks base method.
func (m *MockProjectServiceInterface) UpdateProject(id int64, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", id, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceInterfaceMockRecorder) UpdateProject(id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).UpdateProject), id, name)
}
