// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/failures_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/failures_service.go -destination=internal/service/mocks/failures_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	service "github.com/BennyEisner/test-results/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockFailuresServiceInterface is a mock of FailuresServiceInterface interface.
type MockFailuresServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFailuresServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockFailuresServiceInterfaceMockRecorder is the mock recorder for MockFailuresServiceInterface.
type MockFailuresServiceInterfaceMockRecorder struct {
	mock *MockFailuresServiceInterface
}

// NewMockFailuresServiceInterface creates a new mock instance.
func NewMockFailuresServiceInterface(ctrl *gomock.Controller) *MockFailuresServiceInterface {
	mock := &MockFailuresServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFailuresServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailuresServiceInterface) EXPECT() *MockFailuresServiceInterfaceMockRecorder {
	return m.recorder
}

// GetFailuresByBuildID mocks base method.
func (m *MockFailuresServiceInterface) GetFailuresByBuildID(buildID int64) ([]service.FailureWithTestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailuresByBuildID", buildID)
	ret0, _ := ret[0].([]service.FailureWithTestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailuresByBuildID indicates an expected call of GetFailuresByBuildID.
func (mr *MockFailuresServiceInterfaceMockRecorder) GetFailuresByBuildID(buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailuresByBuildID", reflect.TypeOf((*MockFailuresServiceInterface)(nil).GetFailuresByBuildID), buildID)
}
