// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports/repositories.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/ports/repositories.go -destination=internal/domain/ports/repositories_mock.go -package=ports
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockProjectRepository) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProjectRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProjectRepository)(nil).Count), ctx)
}

// Create mocks base method.
func (m *MockProjectRepository) Create(ctx context.Context, p *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepositoryMockRecorder) Create(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepository)(nil).Create), ctx, p)
}

// Delete mocks base method.
func (m *MockProjectRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockProjectRepository) GetAll(ctx context.Context) ([]*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProjectRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProjectRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockProjectRepository) GetByID(ctx context.Context, id int64) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProjectRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProjectRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockProjectRepository) GetByName(ctx context.Context, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProjectRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProjectRepository)(nil).GetByName), ctx, name)
}

// Update mocks base method.
func (m *MockProjectRepository) Update(ctx context.Context, id int64, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectRepositoryMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectRepository)(nil).Update), ctx, id, name)
}

// MockBuildRepository is a mock of BuildRepository interface.
type MockBuildRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildRepositoryMockRecorder
	isgomock struct{}
}

// MockBuildRepositoryMockRecorder is the mock recorder for MockBuildRepository.
type MockBuildRepositoryMockRecorder struct {
	mock *MockBuildRepository
}

// NewMockBuildRepository creates a new mock instance.
func NewMockBuildRepository(ctrl *gomock.Controller) *MockBuildRepository {
	mock := &MockBuildRepository{ctrl: ctrl}
	mock.recorder = &MockBuildRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildRepository) EXPECT() *MockBuildRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuildRepository) Create(ctx context.Context, build *models.Build) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, build)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBuildRepositoryMockRecorder) Create(ctx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuildRepository)(nil).Create), ctx, build)
}

// Delete mocks base method.
func (m *MockBuildRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildRepository)(nil).Delete), ctx, id)
}

// GetAllByProjectID mocks base method.
func (m *MockBuildRepository) GetAllByProjectID(ctx context.Context, projectID int64) ([]*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByProjectID", ctx, projectID)
	ret0, _ := ret[0].([]*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByProjectID indicates an expected call of GetAllByProjectID.
func (mr *MockBuildRepositoryMockRecorder) GetAllByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByProjectID", reflect.TypeOf((*MockBuildRepository)(nil).GetAllByProjectID), ctx, projectID)
}

// GetAllByTestSuiteID mocks base method.
func (m *MockBuildRepository) GetAllByTestSuiteID(ctx context.Context, suiteID int64) ([]*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByTestSuiteID", ctx, suiteID)
	ret0, _ := ret[0].([]*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByTestSuiteID indicates an expected call of GetAllByTestSuiteID.
func (mr *MockBuildRepositoryMockRecorder) GetAllByTestSuiteID(ctx, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByTestSuiteID", reflect.TypeOf((*MockBuildRepository)(nil).GetAllByTestSuiteID), ctx, suiteID)
}

// GetByID mocks base method.
func (m *MockBuildRepository) GetByID(ctx context.Context, id int64) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBuildRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBuildRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockBuildRepository) Update(ctx context.Context, id int64, build *models.Build) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, build)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildRepositoryMockRecorder) Update(ctx, id, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildRepository)(nil).Update), ctx, id, build)
}

// MockTestSuiteRepository is a mock of TestSuiteRepository interface.
type MockTestSuiteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTestSuiteRepositoryMockRecorder
	isgomock struct{}
}

// MockTestSuiteRepositoryMockRecorder is the mock recorder for MockTestSuiteRepository.
type MockTestSuiteRepositoryMockRecorder struct {
	mock *MockTestSuiteRepository
}

// NewMockTestSuiteRepository creates a new mock instance.
func NewMockTestSuiteRepository(ctrl *gomock.Controller) *MockTestSuiteRepository {
	mock := &MockTestSuiteRepository{ctrl: ctrl}
	mock.recorder = &MockTestSuiteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSuiteRepository) EXPECT() *MockTestSuiteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestSuiteRepository) Create(ctx context.Context, suite *models.TestSuite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, suite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestSuiteRepositoryMockRecorder) Create(ctx, suite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestSuiteRepository)(nil).Create), ctx, suite)
}

// Delete mocks base method.
func (m *MockTestSuiteRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestSuiteRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestSuiteRepository)(nil).Delete), ctx, id)
}

// GetAllByProjectID mocks base method.
func (m *MockTestSuiteRepository) GetAllByProjectID(ctx context.Context, projectID int64) ([]*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByProjectID", ctx, projectID)
	ret0, _ := ret[0].([]*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByProjectID indicates an expected call of GetAllByProjectID.
func (mr *MockTestSuiteRepositoryMockRecorder) GetAllByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByProjectID", reflect.TypeOf((*MockTestSuiteRepository)(nil).GetAllByProjectID), ctx, projectID)
}

// GetByID mocks base method.
func (m *MockTestSuiteRepository) GetByID(ctx context.Context, id int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTestSuiteRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTestSuiteRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockTestSuiteRepository) GetByName(ctx context.Context, projectID int64, name string) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, projectID, name)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTestSuiteRepositoryMockRecorder) GetByName(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTestSuiteRepository)(nil).GetByName), ctx, projectID, name)
}

// Update mocks base method.
func (m *MockTestSuiteRepository) Update(ctx context.Context, id int64, name string) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTestSuiteRepositoryMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestSuiteRepository)(nil).Update), ctx, id, name)
}

// MockTestCaseRepository is a mock of TestCaseRepository interface.
type MockTestCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseRepositoryMockRecorder
	isgomock struct{}
}

// MockTestCaseRepositoryMockRecorder is the mock recorder for MockTestCaseRepository.
type MockTestCaseRepositoryMockRecorder struct {
	mock *MockTestCaseRepository
}

// NewMockTestCaseRepository creates a new mock instance.
func NewMockTestCaseRepository(ctrl *gomock.Controller) *MockTestCaseRepository {
	mock := &MockTestCaseRepository{ctrl: ctrl}
	mock.recorder = &MockTestCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseRepository) EXPECT() *MockTestCaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestCaseRepository) Create(ctx context.Context, tc *models.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestCaseRepositoryMockRecorder) Create(ctx, tc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestCaseRepository)(nil).Create), ctx, tc)
}

// Delete mocks base method.
func (m *MockTestCaseRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestCaseRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestCaseRepository)(nil).Delete), ctx, id)
}

// GetAllBySuiteID mocks base method.
func (m *MockTestCaseRepository) GetAllBySuiteID(ctx context.Context, suiteID int64) ([]*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBySuiteID", ctx, suiteID)
	ret0, _ := ret[0].([]*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBySuiteID indicates an expected call of GetAllBySuiteID.
func (mr *MockTestCaseRepositoryMockRecorder) GetAllBySuiteID(ctx, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBySuiteID", reflect.TypeOf((*MockTestCaseRepository)(nil).GetAllBySuiteID), ctx, suiteID)
}

// GetByID mocks base method.
func (m *MockTestCaseRepository) GetByID(ctx context.Context, id int64) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTestCaseRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTestCaseRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockTestCaseRepository) GetByName(ctx context.Context, suiteID int64, name string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, suiteID, name)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTestCaseRepositoryMockRecorder) GetByName(ctx, suiteID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTestCaseRepository)(nil).GetByName), ctx, suiteID, name)
}

// Update mocks base method.
func (m *MockTestCaseRepository) Update(ctx context.Context, id int64, name, classname string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, classname)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTestCaseRepositoryMockRecorder) Update(ctx, id, name, classname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestCaseRepository)(nil).Update), ctx, id, name, classname)
}

// MockBuildExecutionRepository is a mock of BuildExecutionRepository interface.
type MockBuildExecutionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildExecutionRepositoryMockRecorder
	isgomock struct{}
}

// MockBuildExecutionRepositoryMockRecorder is the mock recorder for MockBuildExecutionRepository.
type MockBuildExecutionRepositoryMockRecorder struct {
	mock *MockBuildExecutionRepository
}

// NewMockBuildExecutionRepository creates a new mock instance.
func NewMockBuildExecutionRepository(ctrl *gomock.Controller) *MockBuildExecutionRepository {
	mock := &MockBuildExecutionRepository{ctrl: ctrl}
	mock.recorder = &MockBuildExecutionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildExecutionRepository) EXPECT() *MockBuildExecutionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuildExecutionRepository) Create(ctx context.Context, execution *models.BuildExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBuildExecutionRepositoryMockRecorder) Create(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuildExecutionRepository)(nil).Create), ctx, execution)
}

// CreateBatch mocks base method.
func (m *MockBuildExecutionRepository) CreateBatch(ctx context.Context, executions []*models.BuildExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, executions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockBuildExecutionRepositoryMockRecorder) CreateBatch(ctx, executions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockBuildExecutionRepository)(nil).CreateBatch), ctx, executions)
}

// GetByBuildID mocks base method.
func (m *MockBuildExecutionRepository) GetByBuildID(ctx context.Context, buildID int64) ([]*models.BuildExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBuildID", ctx, buildID)
	ret0, _ := ret[0].([]*models.BuildExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBuildID indicates an expected call of GetByBuildID.
func (mr *MockBuildExecutionRepositoryMockRecorder) GetByBuildID(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBuildID", reflect.TypeOf((*MockBuildExecutionRepository)(nil).GetByBuildID), ctx, buildID)
}

// MockBuildTestCaseExecutionRepository is a mock of BuildTestCaseExecutionRepository interface.
type MockBuildTestCaseExecutionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildTestCaseExecutionRepositoryMockRecorder
	isgomock struct{}
}

// MockBuildTestCaseExecutionRepositoryMockRecorder is the mock recorder for MockBuildTestCaseExecutionRepository.
type MockBuildTestCaseExecutionRepositoryMockRecorder struct {
	mock *MockBuildTestCaseExecutionRepository
}

// NewMockBuildTestCaseExecutionRepository creates a new mock instance.
func NewMockBuildTestCaseExecutionRepository(ctrl *gomock.Controller) *MockBuildTestCaseExecutionRepository {
	mock := &MockBuildTestCaseExecutionRepository{ctrl: ctrl}
	mock.recorder = &MockBuildTestCaseExecutionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildTestCaseExecutionRepository) EXPECT() *MockBuildTestCaseExecutionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuildTestCaseExecutionRepository) Create(ctx context.Context, execution *models.BuildTestCaseExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBuildTestCaseExecutionRepositoryMockRecorder) Create(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuildTestCaseExecutionRepository)(nil).Create), ctx, execution)
}

// Delete mocks base method.
func (m *MockBuildTestCaseExecutionRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildTestCaseExecutionRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildTestCaseExecutionRepository)(nil).Delete), ctx, id)
}

// GetAllByBuildID mocks base method.
func (m *MockBuildTestCaseExecutionRepository) GetAllByBuildID(ctx context.Context, buildID int64) ([]*models.BuildExecutionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByBuildID", ctx, buildID)
	ret0, _ := ret[0].([]*models.BuildExecutionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByBuildID indicates an expected call of GetAllByBuildID.
func (mr *MockBuildTestCaseExecutionRepositoryMockRecorder) GetAllByBuildID(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByBuildID", reflect.TypeOf((*MockBuildTestCaseExecutionRepository)(nil).GetAllByBuildID), ctx, buildID)
}

// GetByID mocks base method.
func (m *MockBuildTestCaseExecutionRepository) GetByID(ctx context.Context, id int64) (*models.BuildTestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.BuildTestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBuildTestCaseExecutionRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBuildTestCaseExecutionRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockBuildTestCaseExecutionRepository) Update(ctx context.Context, id int64, execution *models.BuildTestCaseExecution) (*models.BuildTestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, execution)
	ret0, _ := ret[0].(*models.BuildTestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildTestCaseExecutionRepositoryMockRecorder) Update(ctx, id, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildTestCaseExecutionRepository)(nil).Update), ctx, id, execution)
}

// MockFailureRepository is a mock of FailureRepository interface.
type MockFailureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFailureRepositoryMockRecorder
	isgomock struct{}
}

// MockFailureRepositoryMockRecorder is the mock recorder for MockFailureRepository.
type MockFailureRepositoryMockRecorder struct {
	mock *MockFailureRepository
}

// NewMockFailureRepository creates a new mock instance.
func NewMockFailureRepository(ctrl *gomock.Controller) *MockFailureRepository {
	mock := &MockFailureRepository{ctrl: ctrl}
	mock.recorder = &MockFailureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailureRepository) EXPECT() *MockFailureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFailureRepository) Create(ctx context.Context, failure *models.Failure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, failure)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFailureRepositoryMockRecorder) Create(ctx, failure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFailureRepository)(nil).Create), ctx, failure)
}

// Delete mocks base method.
func (m *MockFailureRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFailureRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFailureRepository)(nil).Delete), ctx, id)
}

// GetByExecutionID mocks base method.
func (m *MockFailureRepository) GetByExecutionID(ctx context.Context, executionID int64) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExecutionID", ctx, executionID)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExecutionID indicates an expected call of GetByExecutionID.
func (mr *MockFailureRepositoryMockRecorder) GetByExecutionID(ctx, executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExecutionID", reflect.TypeOf((*MockFailureRepository)(nil).GetByExecutionID), ctx, executionID)
}

// GetByID mocks base method.
func (m *MockFailureRepository) GetByID(ctx context.Context, id int64) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFailureRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFailureRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockFailureRepository) Update(ctx context.Context, id int64, failure *models.Failure) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, failure)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFailureRepositoryMockRecorder) Update(ctx, id, failure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFailureRepository)(nil).Update), ctx, id, failure)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserRepository) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepositoryMockRecorder) GetByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetByUsername), ctx, username)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, id int, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, id, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, id, user)
}

// MockUserConfigRepository is a mock of UserConfigRepository interface.
type MockUserConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserConfigRepositoryMockRecorder
	isgomock struct{}
}

// MockUserConfigRepositoryMockRecorder is the mock recorder for MockUserConfigRepository.
type MockUserConfigRepositoryMockRecorder struct {
	mock *MockUserConfigRepository
}

// NewMockUserConfigRepository creates a new mock instance.
func NewMockUserConfigRepository(ctrl *gomock.Controller) *MockUserConfigRepository {
	mock := &MockUserConfigRepository{ctrl: ctrl}
	mock.recorder = &MockUserConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserConfigRepository) EXPECT() *MockUserConfigRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserConfigRepository) Create(ctx context.Context, config *models.UserConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserConfigRepositoryMockRecorder) Create(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserConfigRepository)(nil).Create), ctx, config)
}

// Delete mocks base method.
func (m *MockUserConfigRepository) Delete(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserConfigRepositoryMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserConfigRepository)(nil).Delete), ctx, userID)
}

// GetByUserID mocks base method.
func (m *MockUserConfigRepository) GetByUserID(ctx context.Context, userID int) (*models.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*models.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserConfigRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserConfigRepository)(nil).GetByUserID), ctx, userID)
}

// Update mocks base method.
func (m *MockUserConfigRepository) Update(ctx context.Context, userID int, config *models.UserConfig) (*models.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, config)
	ret0, _ := ret[0].(*models.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserConfigRepositoryMockRecorder) Update(ctx, userID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserConfigRepository)(nil).Update), ctx, userID, config)
}

// MockSearchRepository is a mock of SearchRepository interface.
type MockSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepositoryMockRecorder
	isgomock struct{}
}

// MockSearchRepositoryMockRecorder is the mock recorder for MockSearchRepository.
type MockSearchRepositoryMockRecorder struct {
	mock *MockSearchRepository
}

// NewMockSearchRepository creates a new mock instance.
func NewMockSearchRepository(ctrl *gomock.Controller) *MockSearchRepository {
	mock := &MockSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepository) EXPECT() *MockSearchRepositoryMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSearchRepository) Search(ctx context.Context, query string) ([]*models.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]*models.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchRepositoryMockRecorder) Search(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchRepository)(nil).Search), ctx, query)
}
