// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports/services.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/ports/services.go -destination=internal/domain/service_mocks.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	models "github.com/BennyEisner/test-results/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
	isgomock struct{}
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectService) CreateProject(ctx context.Context, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceMockRecorder) CreateProject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectService)(nil).CreateProject), ctx, name)
}

// DeleteProject mocks base method.
func (m *MockProjectService) DeleteProject(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceMockRecorder) DeleteProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectService)(nil).DeleteProject), ctx, id)
}

// GetAllProjects mocks base method.
func (m *MockProjectService) GetAllProjects(ctx context.Context) ([]*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects", ctx)
	ret0, _ := ret[0].([]*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockProjectServiceMockRecorder) GetAllProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockProjectService)(nil).GetAllProjects), ctx)
}

// GetProjectByID mocks base method.
func (m *MockProjectService) GetProjectByID(ctx context.Context, id int64) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectServiceMockRecorder) GetProjectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectService)(nil).GetProjectByID), ctx, id)
}

// GetProjectByName mocks base method.
func (m *MockProjectService) GetProjectByName(ctx context.Context, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", ctx, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName.
func (mr *MockProjectServiceMockRecorder) GetProjectByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockProjectService)(nil).GetProjectByName), ctx, name)
}

// UpdateProject mocks base method.
func (m *MockProjectService) UpdateProject(ctx context.Context, id int64, name string) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, id, name)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceMockRecorder) UpdateProject(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectService)(nil).UpdateProject), ctx, id, name)
}

// MockBuildService is a mock of BuildService interface.
type MockBuildService struct {
	ctrl     *gomock.Controller
	recorder *MockBuildServiceMockRecorder
	isgomock struct{}
}

// MockBuildServiceMockRecorder is the mock recorder for MockBuildService.
type MockBuildServiceMockRecorder struct {
	mock *MockBuildService
}

// NewMockBuildService creates a new mock instance.
func NewMockBuildService(ctrl *gomock.Controller) *MockBuildService {
	mock := &MockBuildService{ctrl: ctrl}
	mock.recorder = &MockBuildServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildService) EXPECT() *MockBuildServiceMockRecorder {
	return m.recorder
}

// CreateBuild mocks base method.
func (m *MockBuildService) CreateBuild(ctx context.Context, build *models.Build) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", ctx, build)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildServiceMockRecorder) CreateBuild(ctx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildService)(nil).CreateBuild), ctx, build)
}

// DeleteBuild mocks base method.
func (m *MockBuildService) DeleteBuild(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuild", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuild indicates an expected call of DeleteBuild.
func (mr *MockBuildServiceMockRecorder) DeleteBuild(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuild", reflect.TypeOf((*MockBuildService)(nil).DeleteBuild), ctx, id)
}

// GetBuildByID mocks base method.
func (m *MockBuildService) GetBuildByID(ctx context.Context, id int64) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildByID", ctx, id)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildByID indicates an expected call of GetBuildByID.
func (mr *MockBuildServiceMockRecorder) GetBuildByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildByID", reflect.TypeOf((*MockBuildService)(nil).GetBuildByID), ctx, id)
}

// GetBuildsByProjectID mocks base method.
func (m *MockBuildService) GetBuildsByProjectID(ctx context.Context, projectID int64) ([]*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildsByProjectID", ctx, projectID)
	ret0, _ := ret[0].([]*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildsByProjectID indicates an expected call of GetBuildsByProjectID.
func (mr *MockBuildServiceMockRecorder) GetBuildsByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildsByProjectID", reflect.TypeOf((*MockBuildService)(nil).GetBuildsByProjectID), ctx, projectID)
}

// GetBuildsByTestSuiteID mocks base method.
func (m *MockBuildService) GetBuildsByTestSuiteID(ctx context.Context, suiteID int64) ([]*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildsByTestSuiteID", ctx, suiteID)
	ret0, _ := ret[0].([]*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildsByTestSuiteID indicates an expected call of GetBuildsByTestSuiteID.
func (mr *MockBuildServiceMockRecorder) GetBuildsByTestSuiteID(ctx, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildsByTestSuiteID", reflect.TypeOf((*MockBuildService)(nil).GetBuildsByTestSuiteID), ctx, suiteID)
}

// UpdateBuild mocks base method.
func (m *MockBuildService) UpdateBuild(ctx context.Context, id int64, build *models.Build) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuild", ctx, id, build)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildServiceMockRecorder) UpdateBuild(ctx, id, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildService)(nil).UpdateBuild), ctx, id, build)
}

// MockTestSuiteService is a mock of TestSuiteService interface.
type MockTestSuiteService struct {
	ctrl     *gomock.Controller
	recorder *MockTestSuiteServiceMockRecorder
	isgomock struct{}
}

// MockTestSuiteServiceMockRecorder is the mock recorder for MockTestSuiteService.
type MockTestSuiteServiceMockRecorder struct {
	mock *MockTestSuiteService
}

// NewMockTestSuiteService creates a new mock instance.
func NewMockTestSuiteService(ctrl *gomock.Controller) *MockTestSuiteService {
	mock := &MockTestSuiteService{ctrl: ctrl}
	mock.recorder = &MockTestSuiteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSuiteService) EXPECT() *MockTestSuiteServiceMockRecorder {
	return m.recorder
}

// CreateTestSuite mocks base method.
func (m *MockTestSuiteService) CreateTestSuite(ctx context.Context, projectID int64, name string, parentID *int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestSuite", ctx, projectID, name, parentID)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestSuite indicates an expected call of CreateTestSuite.
func (mr *MockTestSuiteServiceMockRecorder) CreateTestSuite(ctx, projectID, name, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestSuite", reflect.TypeOf((*MockTestSuiteService)(nil).CreateTestSuite), ctx, projectID, name, parentID)
}

// DeleteTestSuite mocks base method.
func (m *MockTestSuiteService) DeleteTestSuite(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestSuite", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestSuite indicates an expected call of DeleteTestSuite.
func (mr *MockTestSuiteServiceMockRecorder) DeleteTestSuite(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestSuite", reflect.TypeOf((*MockTestSuiteService)(nil).DeleteTestSuite), ctx, id)
}

// GetTestSuiteByID mocks base method.
func (m *MockTestSuiteService) GetTestSuiteByID(ctx context.Context, id int64) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuiteByID", ctx, id)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuiteByID indicates an expected call of GetTestSuiteByID.
func (mr *MockTestSuiteServiceMockRecorder) GetTestSuiteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuiteByID", reflect.TypeOf((*MockTestSuiteService)(nil).GetTestSuiteByID), ctx, id)
}

// GetTestSuiteByName mocks base method.
func (m *MockTestSuiteService) GetTestSuiteByName(ctx context.Context, projectID int64, name string) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuiteByName", ctx, projectID, name)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuiteByName indicates an expected call of GetTestSuiteByName.
func (mr *MockTestSuiteServiceMockRecorder) GetTestSuiteByName(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuiteByName", reflect.TypeOf((*MockTestSuiteService)(nil).GetTestSuiteByName), ctx, projectID, name)
}

// GetTestSuitesByProjectID mocks base method.
func (m *MockTestSuiteService) GetTestSuitesByProjectID(ctx context.Context, projectID int64) ([]*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuitesByProjectID", ctx, projectID)
	ret0, _ := ret[0].([]*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuitesByProjectID indicates an expected call of GetTestSuitesByProjectID.
func (mr *MockTestSuiteServiceMockRecorder) GetTestSuitesByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuitesByProjectID", reflect.TypeOf((*MockTestSuiteService)(nil).GetTestSuitesByProjectID), ctx, projectID)
}

// UpdateTestSuite mocks base method.
func (m *MockTestSuiteService) UpdateTestSuite(ctx context.Context, id int64, name string) (*models.TestSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestSuite", ctx, id, name)
	ret0, _ := ret[0].(*models.TestSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestSuite indicates an expected call of UpdateTestSuite.
func (mr *MockTestSuiteServiceMockRecorder) UpdateTestSuite(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestSuite", reflect.TypeOf((*MockTestSuiteService)(nil).UpdateTestSuite), ctx, id, name)
}

// MockTestCaseService is a mock of TestCaseService interface.
type MockTestCaseService struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseServiceMockRecorder
	isgomock struct{}
}

// MockTestCaseServiceMockRecorder is the mock recorder for MockTestCaseService.
type MockTestCaseServiceMockRecorder struct {
	mock *MockTestCaseService
}

// NewMockTestCaseService creates a new mock instance.
func NewMockTestCaseService(ctrl *gomock.Controller) *MockTestCaseService {
	mock := &MockTestCaseService{ctrl: ctrl}
	mock.recorder = &MockTestCaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseService) EXPECT() *MockTestCaseServiceMockRecorder {
	return m.recorder
}

// CreateTestCase mocks base method.
func (m *MockTestCaseService) CreateTestCase(ctx context.Context, suiteID int64, name, classname string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCase", ctx, suiteID, name, classname)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestCase indicates an expected call of CreateTestCase.
func (mr *MockTestCaseServiceMockRecorder) CreateTestCase(ctx, suiteID, name, classname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCase", reflect.TypeOf((*MockTestCaseService)(nil).CreateTestCase), ctx, suiteID, name, classname)
}

// DeleteTestCase mocks base method.
func (m *MockTestCaseService) DeleteTestCase(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestCase", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestCase indicates an expected call of DeleteTestCase.
func (mr *MockTestCaseServiceMockRecorder) DeleteTestCase(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestCase", reflect.TypeOf((*MockTestCaseService)(nil).DeleteTestCase), ctx, id)
}

// GetTestCaseByID mocks base method.
func (m *MockTestCaseService) GetTestCaseByID(ctx context.Context, id int64) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCaseByID", ctx, id)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCaseByID indicates an expected call of GetTestCaseByID.
func (mr *MockTestCaseServiceMockRecorder) GetTestCaseByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCaseByID", reflect.TypeOf((*MockTestCaseService)(nil).GetTestCaseByID), ctx, id)
}

// GetTestCaseByName mocks base method.
func (m *MockTestCaseService) GetTestCaseByName(ctx context.Context, suiteID int64, name string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCaseByName", ctx, suiteID, name)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCaseByName indicates an expected call of GetTestCaseByName.
func (mr *MockTestCaseServiceMockRecorder) GetTestCaseByName(ctx, suiteID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCaseByName", reflect.TypeOf((*MockTestCaseService)(nil).GetTestCaseByName), ctx, suiteID, name)
}

// GetTestCasesBySuiteID mocks base method.
func (m *MockTestCaseService) GetTestCasesBySuiteID(ctx context.Context, suiteID int64) ([]*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCasesBySuiteID", ctx, suiteID)
	ret0, _ := ret[0].([]*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCasesBySuiteID indicates an expected call of GetTestCasesBySuiteID.
func (mr *MockTestCaseServiceMockRecorder) GetTestCasesBySuiteID(ctx, suiteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCasesBySuiteID", reflect.TypeOf((*MockTestCaseService)(nil).GetTestCasesBySuiteID), ctx, suiteID)
}

// UpdateTestCase mocks base method.
func (m *MockTestCaseService) UpdateTestCase(ctx context.Context, id int64, name, classname string) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestCase", ctx, id, name, classname)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestCase indicates an expected call of UpdateTestCase.
func (mr *MockTestCaseServiceMockRecorder) UpdateTestCase(ctx, id, name, classname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestCase", reflect.TypeOf((*MockTestCaseService)(nil).UpdateTestCase), ctx, id, name, classname)
}

// MockBuildExecutionService is a mock of BuildExecutionService interface.
type MockBuildExecutionService struct {
	ctrl     *gomock.Controller
	recorder *MockBuildExecutionServiceMockRecorder
	isgomock struct{}
}

// MockBuildExecutionServiceMockRecorder is the mock recorder for MockBuildExecutionService.
type MockBuildExecutionServiceMockRecorder struct {
	mock *MockBuildExecutionService
}

// NewMockBuildExecutionService creates a new mock instance.
func NewMockBuildExecutionService(ctrl *gomock.Controller) *MockBuildExecutionService {
	mock := &MockBuildExecutionService{ctrl: ctrl}
	mock.recorder = &MockBuildExecutionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildExecutionService) EXPECT() *MockBuildExecutionServiceMockRecorder {
	return m.recorder
}

// CreateBuildExecutions mocks base method.
func (m *MockBuildExecutionService) CreateBuildExecutions(ctx context.Context, buildID int64, executions []*models.BuildExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildExecutions", ctx, buildID, executions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBuildExecutions indicates an expected call of CreateBuildExecutions.
func (mr *MockBuildExecutionServiceMockRecorder) CreateBuildExecutions(ctx, buildID, executions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildExecutions", reflect.TypeOf((*MockBuildExecutionService)(nil).CreateBuildExecutions), ctx, buildID, executions)
}

// GetBuildExecutions mocks base method.
func (m *MockBuildExecutionService) GetBuildExecutions(ctx context.Context, buildID int64) ([]*models.BuildExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildExecutions", ctx, buildID)
	ret0, _ := ret[0].([]*models.BuildExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildExecutions indicates an expected call of GetBuildExecutions.
func (mr *MockBuildExecutionServiceMockRecorder) GetBuildExecutions(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildExecutions", reflect.TypeOf((*MockBuildExecutionService)(nil).GetBuildExecutions), ctx, buildID)
}

// MockBuildTestCaseExecutionService is a mock of BuildTestCaseExecutionService interface.
type MockBuildTestCaseExecutionService struct {
	ctrl     *gomock.Controller
	recorder *MockBuildTestCaseExecutionServiceMockRecorder
	isgomock struct{}
}

// MockBuildTestCaseExecutionServiceMockRecorder is the mock recorder for MockBuildTestCaseExecutionService.
type MockBuildTestCaseExecutionServiceMockRecorder struct {
	mock *MockBuildTestCaseExecutionService
}

// NewMockBuildTestCaseExecutionService creates a new mock instance.
func NewMockBuildTestCaseExecutionService(ctrl *gomock.Controller) *MockBuildTestCaseExecutionService {
	mock := &MockBuildTestCaseExecutionService{ctrl: ctrl}
	mock.recorder = &MockBuildTestCaseExecutionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildTestCaseExecutionService) EXPECT() *MockBuildTestCaseExecutionServiceMockRecorder {
	return m.recorder
}

// CreateExecution mocks base method.
func (m *MockBuildTestCaseExecutionService) CreateExecution(ctx context.Context, buildID int64, input *models.BuildExecutionInput) (*models.BuildTestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExecution", ctx, buildID, input)
	ret0, _ := ret[0].(*models.BuildTestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExecution indicates an expected call of CreateExecution.
func (mr *MockBuildTestCaseExecutionServiceMockRecorder) CreateExecution(ctx, buildID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecution", reflect.TypeOf((*MockBuildTestCaseExecutionService)(nil).CreateExecution), ctx, buildID, input)
}

// DeleteExecution mocks base method.
func (m *MockBuildTestCaseExecutionService) DeleteExecution(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecution indicates an expected call of DeleteExecution.
func (mr *MockBuildTestCaseExecutionServiceMockRecorder) DeleteExecution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecution", reflect.TypeOf((*MockBuildTestCaseExecutionService)(nil).DeleteExecution), ctx, id)
}

// GetExecutionByID mocks base method.
func (m *MockBuildTestCaseExecutionService) GetExecutionByID(ctx context.Context, id int64) (*models.BuildTestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionByID", ctx, id)
	ret0, _ := ret[0].(*models.BuildTestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionByID indicates an expected call of GetExecutionByID.
func (mr *MockBuildTestCaseExecutionServiceMockRecorder) GetExecutionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionByID", reflect.TypeOf((*MockBuildTestCaseExecutionService)(nil).GetExecutionByID), ctx, id)
}

// GetExecutionsByBuildID mocks base method.
func (m *MockBuildTestCaseExecutionService) GetExecutionsByBuildID(ctx context.Context, buildID int64) ([]*models.BuildExecutionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsByBuildID", ctx, buildID)
	ret0, _ := ret[0].([]*models.BuildExecutionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByBuildID indicates an expected call of GetExecutionsByBuildID.
func (mr *MockBuildTestCaseExecutionServiceMockRecorder) GetExecutionsByBuildID(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByBuildID", reflect.TypeOf((*MockBuildTestCaseExecutionService)(nil).GetExecutionsByBuildID), ctx, buildID)
}

// UpdateExecution mocks base method.
func (m *MockBuildTestCaseExecutionService) UpdateExecution(ctx context.Context, id int64, execution *models.BuildTestCaseExecution) (*models.BuildTestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecution", ctx, id, execution)
	ret0, _ := ret[0].(*models.BuildTestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExecution indicates an expected call of UpdateExecution.
func (mr *MockBuildTestCaseExecutionServiceMockRecorder) UpdateExecution(ctx, id, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecution", reflect.TypeOf((*MockBuildTestCaseExecutionService)(nil).UpdateExecution), ctx, id, execution)
}

// MockFailureService is a mock of FailureService interface.
type MockFailureService struct {
	ctrl     *gomock.Controller
	recorder *MockFailureServiceMockRecorder
	isgomock struct{}
}

// MockFailureServiceMockRecorder is the mock recorder for MockFailureService.
type MockFailureServiceMockRecorder struct {
	mock *MockFailureService
}

// NewMockFailureService creates a new mock instance.
func NewMockFailureService(ctrl *gomock.Controller) *MockFailureService {
	mock := &MockFailureService{ctrl: ctrl}
	mock.recorder = &MockFailureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailureService) EXPECT() *MockFailureServiceMockRecorder {
	return m.recorder
}

// CreateFailure mocks base method.
func (m *MockFailureService) CreateFailure(ctx context.Context, failure *models.Failure) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFailure", ctx, failure)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFailure indicates an expected call of CreateFailure.
func (mr *MockFailureServiceMockRecorder) CreateFailure(ctx, failure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailure", reflect.TypeOf((*MockFailureService)(nil).CreateFailure), ctx, failure)
}

// DeleteFailure mocks base method.
func (m *MockFailureService) DeleteFailure(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailure", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailure indicates an expected call of DeleteFailure.
func (mr *MockFailureServiceMockRecorder) DeleteFailure(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailure", reflect.TypeOf((*MockFailureService)(nil).DeleteFailure), ctx, id)
}

// GetFailureByExecutionID mocks base method.
func (m *MockFailureService) GetFailureByExecutionID(ctx context.Context, executionID int64) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailureByExecutionID", ctx, executionID)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailureByExecutionID indicates an expected call of GetFailureByExecutionID.
func (mr *MockFailureServiceMockRecorder) GetFailureByExecutionID(ctx, executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureByExecutionID", reflect.TypeOf((*MockFailureService)(nil).GetFailureByExecutionID), ctx, executionID)
}

// GetFailureByID mocks base method.
func (m *MockFailureService) GetFailureByID(ctx context.Context, id int64) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailureByID", ctx, id)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailureByID indicates an expected call of GetFailureByID.
func (mr *MockFailureServiceMockRecorder) GetFailureByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureByID", reflect.TypeOf((*MockFailureService)(nil).GetFailureByID), ctx, id)
}

// UpdateFailure mocks base method.
func (m *MockFailureService) UpdateFailure(ctx context.Context, id int64, failure *models.Failure) (*models.Failure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailure", ctx, id, failure)
	ret0, _ := ret[0].(*models.Failure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFailure indicates an expected call of UpdateFailure.
func (mr *MockFailureServiceMockRecorder) UpdateFailure(ctx, id, failure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailure", reflect.TypeOf((*MockFailureService)(nil).UpdateFailure), ctx, id, failure)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, username)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUserService) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserServiceMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserService)(nil).GetUserByUsername), ctx, username)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, id int, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, id, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, id, username)
}

// MockUserConfigService is a mock of UserConfigService interface.
type MockUserConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockUserConfigServiceMockRecorder
	isgomock struct{}
}

// MockUserConfigServiceMockRecorder is the mock recorder for MockUserConfigService.
type MockUserConfigServiceMockRecorder struct {
	mock *MockUserConfigService
}

// NewMockUserConfigService creates a new mock instance.
func NewMockUserConfigService(ctrl *gomock.Controller) *MockUserConfigService {
	mock := &MockUserConfigService{ctrl: ctrl}
	mock.recorder = &MockUserConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserConfigService) EXPECT() *MockUserConfigServiceMockRecorder {
	return m.recorder
}

// CreateUserConfig mocks base method.
func (m *MockUserConfigService) CreateUserConfig(ctx context.Context, userID int, layouts, activeLayoutID string) (*models.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserConfig", ctx, userID, layouts, activeLayoutID)
	ret0, _ := ret[0].(*models.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserConfig indicates an expected call of CreateUserConfig.
func (mr *MockUserConfigServiceMockRecorder) CreateUserConfig(ctx, userID, layouts, activeLayoutID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserConfig", reflect.TypeOf((*MockUserConfigService)(nil).CreateUserConfig), ctx, userID, layouts, activeLayoutID)
}

// DeleteUserConfig mocks base method.
func (m *MockUserConfigService) DeleteUserConfig(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConfig", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserConfig indicates an expected call of DeleteUserConfig.
func (mr *MockUserConfigServiceMockRecorder) DeleteUserConfig(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConfig", reflect.TypeOf((*MockUserConfigService)(nil).DeleteUserConfig), ctx, userID)
}

// GetUserConfig mocks base method.
func (m *MockUserConfigService) GetUserConfig(ctx context.Context, userID int) (*models.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfig", ctx, userID)
	ret0, _ := ret[0].(*models.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfig indicates an expected call of GetUserConfig.
func (mr *MockUserConfigServiceMockRecorder) GetUserConfig(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfig", reflect.TypeOf((*MockUserConfigService)(nil).GetUserConfig), ctx, userID)
}

// UpdateUserConfig mocks base method.
func (m *MockUserConfigService) UpdateUserConfig(ctx context.Context, userID int, layouts, activeLayoutID string) (*models.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConfig", ctx, userID, layouts, activeLayoutID)
	ret0, _ := ret[0].(*models.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserConfig indicates an expected call of UpdateUserConfig.
func (mr *MockUserConfigServiceMockRecorder) UpdateUserConfig(ctx, userID, layouts, activeLayoutID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConfig", reflect.TypeOf((*MockUserConfigService)(nil).UpdateUserConfig), ctx, userID, layouts, activeLayoutID)
}

// MockJUnitImportService is a mock of JUnitImportService interface.
type MockJUnitImportService struct {
	ctrl     *gomock.Controller
	recorder *MockJUnitImportServiceMockRecorder
	isgomock struct{}
}

// MockJUnitImportServiceMockRecorder is the mock recorder for MockJUnitImportService.
type MockJUnitImportServiceMockRecorder struct {
	mock *MockJUnitImportService
}

// NewMockJUnitImportService creates a new mock instance.
func NewMockJUnitImportService(ctrl *gomock.Controller) *MockJUnitImportService {
	mock := &MockJUnitImportService{ctrl: ctrl}
	mock.recorder = &MockJUnitImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJUnitImportService) EXPECT() *MockJUnitImportServiceMockRecorder {
	return m.recorder
}

// ProcessJUnitData mocks base method.
func (m *MockJUnitImportService) ProcessJUnitData(ctx context.Context, projectID, suiteID int64, junitData *models.JUnitTestSuites) (*models.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJUnitData", ctx, projectID, suiteID, junitData)
	ret0, _ := ret[0].(*models.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessJUnitData indicates an expected call of ProcessJUnitData.
func (mr *MockJUnitImportServiceMockRecorder) ProcessJUnitData(ctx, projectID, suiteID, junitData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJUnitData", reflect.TypeOf((*MockJUnitImportService)(nil).ProcessJUnitData), ctx, projectID, suiteID, junitData)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
	isgomock struct{}
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSearchService) Search(ctx context.Context, query string) ([]*models.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]*models.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchServiceMockRecorder) Search(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchService)(nil).Search), ctx, query)
}
