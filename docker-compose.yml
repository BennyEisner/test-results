services:
  db:
    image: postgres:latest
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_DB: test_results
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/1_schema.sql
      - ./db/add_user_and_config_tables.sql:/docker-entrypoint-initdb.d/2_add_user_and_config_tables.sql
      - ./db/add_auth_tables.sql:/docker-entrypoint-initdb.d/3_add_auth_tables.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgrespassword
      - DB_NAME=test_results
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/readyz"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 3s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8088:80"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - app-network
volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
